#!/usr/bin/env node

/**
 * Module dependencies.
 */
const app = require('../app');
const util = require('../util.js');
const debug = require('debug')('websocket-node-angular:server');
const http = require('http');
const socketio = require('socket.io')
const { webSocket } = require('../app_api/_config')
const mongoose = require('mongoose');

/**
 * Mongo 
 */
const url = process.env.MONGO_URM;

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
const server = http.createServer(app);

// PORT=8080
// MONGO_URL=mongodb://dfAdmin:Cc%40m!123@camv-d10dbdev1:27017/DevGeneric?authSource=admin
// MONGO_URI=mongodb://localhost:27017/DevGeneric&& node bin/www
// MONGO_DB=DevGeneric
// NODE_ENV=development
// WHITELIST=["http://localhost","http://localhost:80","http://camv-d10dfdev1","http://camv-d10dfdev1:80","http://CCAM-CND72485CV","http://CCAM-CND72485CV:80"]

/* Listen on provided port, on all network interfaces. */
util.connectMongoose(url, function () {
  //console.log(`www: Starting HTTP server at: ${url}`);
  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening); // Calls function to bind port and url (see below)
});


/**
 * Attach and initialize web sockets.
 */
const io = socketio(server, { 
  cors: { origin: '*',
  methods: ["GET", "POST"], //specific origin you want to give access to,
  } })

// Create connection to the websocket
io.on('connection', webSocket)



/**
 * Listen on provided port, on all network interfaces.
 */
// server.listen(port);
// server.on('error', onError);
// server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log(`Server running on http://localhost:${port}`)
}
